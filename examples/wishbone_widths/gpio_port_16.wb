peripheral {
	name = "GPIO Port";
	description = "A sample 16-bit general-purpose bidirectional I/O port, explaining how to use SLV and PASS-THROUGH registers.";
	hdl_entity = "wb_slave_gpio_port";
	prefix = "gpio";
	wishbone_width = 16;

	reg {
		name = "Pin direction register";
		description = "A register defining the direction of the GPIO potr pins.";
		prefix = "ddr";

		field {
			name = "Pin directions";
			description = "Each bit in this register defines the direction of corresponding pin of the GPIO port. 1 means the pin is an OUTPUT, 0 means the pin is an INPUT";
			type = SLV;
			size = 16;
			access_bus = READ_WRITE;
			access_dev = READ_ONLY;
		};
	};

	reg {
		name = "Pin input state register";
		description = "A register containing the current state of input pins.";
		prefix = "psr";
		field {
			name = "Pin input state";
			description = "Each bit in this register reflects the state of corresponding GPIO port pin.";
			type = SLV;
			size = 16;
			access_bus = READ_ONLY;
			access_dev = WRITE_ONLY;
		};
	};
	reg {
		name = "Port output register";
		description = "Register containing the output pin state.";
		prefix = "pdr";
		field {
			name = "Port output value";
--			description = "Writing '1' sets the corresponding GPIO pin to '1'";
			type = PASS_THROUGH;
			size = 16;
		};
	};


	reg {
		name = "Set output pin register";
		description = "Writing '1' sets the corresponding GPIO pin to '1'";
		prefix = "sopr";
-- Our driver developer would want these two (SOPR and COPR) registers' addresses to be aligned to multiple of 4 :)
		align = 4;
		field {
			name = "Set output pin register";
			type = PASS_THROUGH;
			size = 16;
		};
	};

-- Clear output register. Designed identically as the previous reg.
	reg {
		name = "Clear output pin register";
		description = "Writing '1' clears the corresponding GPIO pin";
		prefix = "copr";
		field {
			name = "Clear output pin register";
			type = PASS_THROUGH;
			size = 16;
		};
	};
};
